#Variabili indipendenti delle funzioni obiettivo
@parameters x y η t θ

#Definizione delle derivate
@derivatives Dt'~t
@derivatives Dx'~x
@derivatives Dy'~y
@derivatives Dη'~η
@derivatives Dxx''~x
@derivatives Dyy''~y


#funzioni obiettivo rispetto a cui viene risolto il sistema di PDEs
u  = u1(x,y,η,t)
v  = u2(x,y,η,t)
w  = u3(x,y,η,t)
ω  = u4(x,y,η,t)
θm = u5(x,y,η,t)
qm = u6(x,y,η,t)
z  = u7(x,y,η,t)

#physical constants
g  = 9.81 #constant
γ  = 1.4 #air cp/cv=1.4
ρd = 1 #dry air density
p0 = 100000 #reference pressure 10^5 Pa
Rd = 8.31 #gas constant for dry air
ηc = 0.2 #page 8 of Advanced Research WRF M4

#simulation inputs
sum_of_qs = 0.1 #read from file
Δx = 1 #dummy
Δy = 1 #dummy

#scale factors
dist = x^2 + y^2 #dummy for distance on earth
Dxd  = 2*x #Dx(dist)
Dyd  = 2*y #Dy(dist)
mx   = Δx/dist
my   = Δy/dist

#definitions
αd = 1/ρd
p  = p0*(Rd*θm/(p0*αd))^γ
c1 = 2*ηc*ηc/((1 - ηc)*(1 - ηc)*(1 - ηc))
c2 = -ηc*(4 + ηc + ηc*ηc)/((1 - ηc)*(1 - ηc)*(1 - ηc))
c3 = 2*(1 + ηc + ηc*ηc)/((1 - ηc)*(1 - ηc)*(1 - ηc))
c4 = -(1 + ηc)/((1 - ηc)*(1 - ηc)*(1 - ηc))
B  = c1 + c2*η + c3*η*η + c4*η*η*η
ps = 10 #dummy
pt = 1 #dummy
pd = B*(ps - pt) + (η - B)*(p0 - pt) + pt
μd = (ps - pt)*(c2 + 2*c3*η + 3*c4*η*η) + (p0 - pt)*(1 - c2 - 2*c3*η - 3*c4*η*η) #[μd = Dη(pd)]
D2pd = (ps - pt)*(2*c3 + 6*c4*η) + (p0 - pt)*(-2*c3 - 6*c4*η) # (maybe find η as a function of pd)
#ω  = Dt(η)
U  = μd*u/my
V  = μd*v/mx
W  = μd*w/my
Ω  = μd*ω/my
Θm = μd*θm
Qm = μd*qm
ϕ  = g*z
α  = αd/(1 + sum_of_qs)


#Calcolo delle divergenze
divVu  = Dx(U*u)  + Dy(V*u)  + Dη(Ω*u)
divVv  = Dx(U*v)  + Dy(V*v)  + Dη(Ω*v)
divVw  = Dx(U*w)  + Dy(V*w)  + Dη(Ω*w)
divVθm = Dx(U*θm) + Dy(V*θm) + Dη(Ω*θm)
divV   = Dx(V)    + Dy(V)    + Dη(V)
divVqm = Dx(U*qm) + Dy(V*qm) + Dη(Ω*qm)

#Prodotto scalare
innerV∇ϕ = U*g*Dx(z) + V*g*Dy(z) + Ω*g*Dη(z) #U*Dx(ϕ) + V*Dy(ϕ) + Ω*Dη(ϕ)


#geographic parametrization
Ωe = 1 #dummy #angular rotation rate of earth
ψ  = 1 #dummy #latitude on earth
re = 1000 #dummy #radius of earth
αr = 1 #dummy #local rotation angle between y-axis and the meridians
f  = 2*Ωe*sin(ψ)
e  = 2*Ωe*cos(ψ)

#external forcings
Dymx = -Δx/(dist*dist)*Dyd
Dxmy = -Δy/(dist*dist)*Dxd

FU  =  (mx/my)*(f + u*(my/mx)*Dymx - v*Dxmy)*V - (u/re + e*cos(αr))*W
FV  = -(my/mx)*((f + u*(my/mx)*Dymx - v*Dxmy*U + (v/re - e*sin(αr))*W))
FW  = e*(U*cos(αr) - (mx/my)*V*sin(αr) + 1/re*(u*U + (mx/my)*v*V))
#Dal coupling con SFIRE, per i primi test non necessario. Va bene porre a 0?
FΘm = 0 #dummy
FQm = 0 #dummy


equations (Flux-Form Euler)
#
eq1 = Dt(U) + divVu + μd*α*Dx(p) + (α/αd)*Dη(p)*Dx(ϕ) ~ FU
eq2 = Dt(V) + divVv + μd*α*Dy(p) + (α/αd)*Dη(p)*Dy(ϕ) ~ FV
eq3 = Dt(W) + divVw - g*((α/αd)*Dη(p) - μd)           ~ FW
eq4 = Dt(Θm) + divVθm                                 ~ 0 #?
eq5 = Dt(μd) + divV                                   ~ 0
eq6 = Dt(ϕ)  + (1/μd)*(innerV∇ϕ - g*W)                ~ 0
eq7 = Dt(Qm) + divVqm                                 ~ 0 #?


PhyBcs =     [] #???


# Space and time domains
domains = [x ∈ IntervalDomain(-1.0,1.0),
           y ∈ IntervalDomain(-1.0,1.0),
           η ∈ IntervalDomain(0.0,1.0),
           t ∈ IntervalDomain(0.0,1.0)]

# Discretization
dx = 0.1; dy= 0.1; dη = 0.1; dt = 0.1
